{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///Users/dilleuh/Coding/Pantun%20Generator/app/api/generate-pantun/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport Groq from 'groq-sdk'\n\nconst groq = new Groq({\n  apiKey: process.env.GROQ_API_KEY,\n})\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { mode, input, mood } = await request.json()\n\n    if (!process.env.GROQ_API_KEY) {\n      return NextResponse.json({ error: 'API key tidak ditemukan. Silakan periksa konfigurasi.' }, { status: 500 })\n    }\n\n\n    let systemPrompt = `Buat pantun tradisional Indonesia dengan struktur yang BENAR:\n\nPENTING: Pantun memiliki 2 bagian terpisah:\n- BARIS 1-2: SAMPIRAN (deskripsi alam/kehidupan, TIDAK perlu berhubungan dengan pesan)\n- BARIS 3-4: ISI (pesan/nasihat yang bermakna)\n\nCONTOH STRUKTUR YANG BENAR:\n\n\"Jalan-jalan ke kota Blitar\nJangan lupa beli sukun\nJika kamu ingin pintar\nBelajarlah dengan tekun\"\n→ Sampiran: tentang perjalanan ke Blitar\n→ Isi: nasihat tentang belajar\n\n\"Hati-hati menyeberang\nJangan sampai titian patah\nHati-hati di rantau orang\nJangan sampai berbuat salah\"\n→ Sampiran: tentang menyeberang\n→ Isi: nasihat tentang berhati-hati\n\n\"Pisang emas dibawa berlayar\nMasak sebiji di atas peti\nHutang emas boleh dibayar\nHutang budi dibawa mati\"\n→ Sampiran: tentang pisang\n→ Isi: nasihat tentang hutang budi\n\n\"Ada ubi ada talas\nAda budi ada balas\nSebab pulut santan binasa\nSebab mulut badan merana\"\n→ Sampiran: tentang ubi dan talas\n→ Isi: nasihat tentang budi dan mulut\n\n\"Tumbuh merata pohon tebu\nPergi ke pasar membeli daging\nBanyak harta miskin ilmu\nBagai rumah tidak berdinding\"\n→ Sampiran: tentang pohon tebu dan pasar\n→ Isi: nasihat tentang ilmu\n\n\"Dalam semak ada duri\nAyam kuning buat sarang\nOrang tamak selalu rugi\nMacam anjing dengan bayang\"\n→ Sampiran: tentang semak dan ayam\n→ Isi: nasihat tentang tamak\n\n\"Kayu bakar dibuat orang\nArang dibakar memanaskan diri\nJangan mudah menyalahkan orang\nCermin muka lihat sendiri\"\n→ Sampiran: tentang kayu bakar\n→ Isi: nasihat tentang menyalahkan orang\n\n\"Rusa kecil diam terkurung\nKurang makan kurang minum\nCari ilmu jangan murung\nCerialah selalu banyak tersenyum\"\n→ Sampiran: tentang rusa\n→ Isi: nasihat tentang ilmu dan senyum\n\nWAJIB: \n- Rima a-b-a-b sempurna\n- Sampiran (baris 1-2) dan Isi (baris 3-4) TIDAK perlu berhubungan\n- Bahasa natural, bermakna\n- Jangan lanjutkan pola sampiran di baris 3-4\n\nFormat: Hanya pantun, tanpa penjelasan.`\n\n    let userPrompt = ''\n\n    switch (mode) {\n      case 'random':\n        userPrompt = 'Buat pantun dengan tema acak. Pastikan baris 1-2 adalah sampiran dan baris 3-4 adalah isi yang bermakna.'\n        break\n      \n      case 'continue':\n        userPrompt = `Lengkapi pantun ini menjadi 4 baris penuh:\n${input}\n\nWAJIB: Jika yang diberikan adalah sampiran (baris 1-2), buat isi (baris 3-4) yang bermakna. Jika yang diberikan adalah isi (baris 3-4), buat sampiran (baris 1-2) yang sesuai. Rima a-b-a-b sempurna.`\n        break\n      \n      case 'mood':\n        userPrompt = `Buat pantun tentang \"${mood}\". Baris 1-2 sampiran, baris 3-4 isi yang sesuai dengan mood tersebut.`\n        break\n      \n      default:\n        return NextResponse.json({ error: 'Mode tidak valid' }, { status: 400 })\n    }\n\n    const completion = await groq.chat.completions.create({\n      model: \"llama-3.3-70b-versatile\",\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: userPrompt }\n      ],\n      max_tokens: 200,\n      temperature: 0.6,\n      top_p: 0.9,\n    })\n\n    const pantun = completion.choices[0]?.message?.content?.trim()\n\n    if (!pantun) {\n      throw new Error('Gagal menghasilkan pantun')\n    }\n\n    return NextResponse.json({ pantun })\n\n  } catch (error: any) {\n    console.error('Error generating pantun:', error)\n    \n    if (error.code === 'insufficient_quota') {\n      return NextResponse.json(\n        { error: 'Kuota API Groq habis. Silakan periksa billing Anda atau gunakan API key yang berbeda.' },\n        { status: 402 }\n      )\n    }\n    \n    if (error.code === 'model_not_found') {\n      return NextResponse.json(\n        { error: 'Model tidak tersedia. Silakan periksa konfigurasi API.' },\n        { status: 400 }\n      )\n    }\n    \n    return NextResponse.json(\n      { error: 'Terjadi kesalahan saat menghasilkan pantun. Silakan coba lagi.' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,OAAO,IAAI,kKAAI,CAAC;IACpB,QAAQ,QAAQ,GAAG,CAAC,YAAY;AAClC;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEhD,IAAI,CAAC,QAAQ,GAAG,CAAC,YAAY,EAAE;YAC7B,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAwD,GAAG;gBAAE,QAAQ;YAAI;QAC7G;QAGA,IAAI,eAAe,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAsEe,CAAC;QAEpC,IAAI,aAAa;QAEjB,OAAQ;YACN,KAAK;gBACH,aAAa;gBACb;YAEF,KAAK;gBACH,aAAa,CAAC;AACtB,EAAE,MAAM;;qMAE6L,CAAC;gBAC9L;YAEF,KAAK;gBACH,aAAa,CAAC,qBAAqB,EAAE,KAAK,sEAAsE,CAAC;gBACjH;YAEF;gBACE,OAAO,gJAAY,CAAC,IAAI,CAAC;oBAAE,OAAO;gBAAmB,GAAG;oBAAE,QAAQ;gBAAI;QAC1E;QAEA,MAAM,aAAa,MAAM,KAAK,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACpD,OAAO;YACP,UAAU;gBACR;oBAAE,MAAM;oBAAU,SAAS;gBAAa;gBACxC;oBAAE,MAAM;oBAAQ,SAAS;gBAAW;aACrC;YACD,YAAY;YACZ,aAAa;YACb,OAAO;QACT;QAEA,MAAM,SAAS,WAAW,OAAO,CAAC,EAAE,EAAE,SAAS,SAAS;QAExD,IAAI,CAAC,QAAQ;YACX,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE;QAAO;IAEpC,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,4BAA4B;QAE1C,IAAI,MAAM,IAAI,KAAK,sBAAsB;YACvC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwF,GACjG;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,MAAM,IAAI,KAAK,mBAAmB;YACpC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyD,GAClE;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiE,GAC1E;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}